// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// simulate_polymerase_cpp
Rcpp::List simulate_polymerase_cpp(int k, double ksd, int k_min, int k_max, int gene_len, double alpha, double beta, double zeta, double zeta_sd, double zeta_min, double zeta_max, int cell_num, int pol_size, int add_space, double time, Rcpp::Nullable<Rcpp::NumericVector> time_points_to_record, Rcpp::Nullable<Rcpp::NumericVector> zeta_vec);
RcppExport SEXP _STADyUM_simulate_polymerase_cpp(SEXP kSEXP, SEXP ksdSEXP, SEXP k_minSEXP, SEXP k_maxSEXP, SEXP gene_lenSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP zetaSEXP, SEXP zeta_sdSEXP, SEXP zeta_minSEXP, SEXP zeta_maxSEXP, SEXP cell_numSEXP, SEXP pol_sizeSEXP, SEXP add_spaceSEXP, SEXP timeSEXP, SEXP time_points_to_recordSEXP, SEXP zeta_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type ksd(ksdSEXP);
    Rcpp::traits::input_parameter< int >::type k_min(k_minSEXP);
    Rcpp::traits::input_parameter< int >::type k_max(k_maxSEXP);
    Rcpp::traits::input_parameter< int >::type gene_len(gene_lenSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< double >::type zeta_sd(zeta_sdSEXP);
    Rcpp::traits::input_parameter< double >::type zeta_min(zeta_minSEXP);
    Rcpp::traits::input_parameter< double >::type zeta_max(zeta_maxSEXP);
    Rcpp::traits::input_parameter< int >::type cell_num(cell_numSEXP);
    Rcpp::traits::input_parameter< int >::type pol_size(pol_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type add_space(add_spaceSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type time_points_to_record(time_points_to_recordSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type zeta_vec(zeta_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_polymerase_cpp(k, ksd, k_min, k_max, gene_len, alpha, beta, zeta, zeta_sd, zeta_min, zeta_max, cell_num, pol_size, add_space, time, time_points_to_record, zeta_vec));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_STADyUM_simulate_polymerase_cpp", (DL_FUNC) &_STADyUM_simulate_polymerase_cpp, 17},
    {NULL, NULL, 0}
};

RcppExport void R_init_STADyUM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
